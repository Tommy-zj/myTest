/*     */ package WEB-INF.classes.com.bbkj.service.impl;
/*     */ 
/*     */ import com.bbkj.common.utils.Page;
/*     */ import com.bbkj.dao.AddressDao;
/*     */ import com.bbkj.domain.Address;
/*     */ import com.bbkj.service.AdressService;
/*     */ import java.io.Serializable;
/*     */ import java.util.List;
/*     */ import org.hibernate.criterion.Criterion;
/*     */ import org.hibernate.criterion.DetachedCriteria;
/*     */ import org.hibernate.criterion.Order;
/*     */ import org.hibernate.criterion.Restrictions;
/*     */ import org.springframework.beans.factory.annotation.Autowired;
/*     */ import org.springframework.context.annotation.Scope;
/*     */ import org.springframework.stereotype.Service;
/*     */ 
/*     */ @Service
/*     */ @Scope("prototype")
/*     */ public class AdressServiceImpl
/*     */   implements AdressService
/*     */ {
/*     */   @Autowired
/*     */   private AddressDao addressDao;
/*     */   
/*     */   public Address findAdressById(Long id) {
/*  26 */     return (Address)this.addressDao.load(id.longValue());
/*     */   }
/*     */ 
/*     */   
/*     */   public Serializable save(Address adress) {
/*  31 */     return this.addressDao.save(adress);
/*     */   }
/*     */ 
/*     */   
/*     */   public void update(Address adress) {
/*  36 */     this.addressDao.update(adress);
/*     */   }
/*     */ 
/*     */   
/*     */   public void remove(Address adress) {
/*  41 */     this.addressDao.remove(adress);
/*     */   }
/*     */ 
/*     */   
/*     */   public void remove(long[] ids) {
/*  46 */     this.addressDao.remove(ids);
/*     */   }
/*     */ 
/*     */   
/*     */   public List<Address> listAll() {
/*  51 */     return this.addressDao.listAll();
/*     */   }
/*     */ 
/*     */   
/*     */   public List<Address> list(DetachedCriteria criteria) {
/*  56 */     return this.addressDao.list(criteria);
/*     */   }
/*     */ 
/*     */   
/*     */   public Page pageList(DetachedCriteria criteria, int pageNo, int pageSize) {
/*  61 */     return this.addressDao.pageList(criteria, pageNo, pageSize);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Address findDefaultAdress(long person_id) {
/*  73 */     DetachedCriteria criteria = DetachedCriteria.forClass(Address.class);
/*  74 */     criteria.add((Criterion)Restrictions.eq("person_id", Long.valueOf(person_id)));
/*  75 */     criteria.add((Criterion)Restrictions.eq("checks", Integer.valueOf(1)));
/*  76 */     List<Address> adress = this.addressDao.list(criteria);
/*  77 */     if (adress.size() > 0) {
/*  78 */       return adress.get(0);
/*     */     }
/*     */ 
/*     */     
/*  82 */     DetachedCriteria criteria1 = DetachedCriteria.forClass(Address.class).add((Criterion)Restrictions.eq("person_id", Long.valueOf(person_id))).addOrder(Order.desc("id"));
/*  83 */     List<Address> address1 = this.addressDao.list(criteria1);
/*  84 */     if (address1.size() > 0) {
/*  85 */       return address1.get(0);
/*     */     }
/*  87 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public List<Address> findAllDefaultAdress(long person_id) {
/*  94 */     DetachedCriteria criteria = DetachedCriteria.forClass(Address.class).add((Criterion)Restrictions.eq("person_id", Long.valueOf(person_id))).add((Criterion)Restrictions.eq("checks", Integer.valueOf(1)));
/*  95 */     return this.addressDao.list(criteria);
/*     */   }
/*     */ 
/*     */   
/*     */   public Page pagelist(int pageNo, int pageSize) {
/* 100 */     DetachedCriteria criteria = DetachedCriteria.forClass(Address.class);
/* 101 */     Page page = this.addressDao.pageList(criteria, pageNo, pageSize);
/* 102 */     return page;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Page findAllAdressByPersonId(long person_id, int pageNo, int pageSize) {
/* 109 */     DetachedCriteria criteria = DetachedCriteria.forClass(Address.class).addOrder(Order.desc("id")).ad