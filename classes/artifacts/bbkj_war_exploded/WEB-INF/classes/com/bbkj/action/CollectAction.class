/*     */ package WEB-INF.classes.com.bbkj.socket;
/*     */ import com.bbkj.domain.ChatList;
/*     */ import com.bbkj.socket.Message;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.FileReader;
/*     */ import java.io.IOException;
/*     */ import java.io.LineNumberReader;
/*     */ import java.io.RandomAccessFile;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.Set;
/*     */ import java.util.concurrent.ConcurrentHashMap;
/*     */ import javax.websocket.Session;
/*     */ import net.sf.json.JSONObject;
/*     */ 
/*     */ public class WebSocketUtils {
/*  21 */   public static Map<String, Set<Session>> rooms = new ConcurrentHashMap<>();
/*     */   
/*  23 */   public static Map<String, Session> counts = new ConcurrentHashMap<>();
/*     */ 
/*     */   
/*  26 */   public static String rootUrl = "/data/static/chat/";
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void CreateOrJoin(String room, Session session) {
/*  37 */     if (!rooms.containsKey(room)) {
/*     */       
/*  39 */       Set<Session> room1 = new HashSet<>();
/*     */       
/*  41 */       room1.add(session);
/*  42 */       rooms.put(room, room1);
/*     */     } else {
/*     */       
/*  45 */       ((Set<Session>)rooms.get(room)).add(session);
/*     */     } 
/*  47 */     System.out.println("房间数 = " + rooms.size());
/*     */   }
/*     */ 
/*     */   
/*     */   public static void broadcast(String room, String message) throws Exception {
/*  52 */     if (rooms.get(room) == null) {
/*  53 */       System.out.println("房间不存在");
/*     */     } else {
/*  55 */       for (Session sessions : rooms.get(room)) {
/*  56 */         sessions.getBasicRemote().sendText(message);
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void remove(String room) {
/*     */     try {
/*  66 */       rooms.remove(room);
/*  67 */       System.out.println("房间数 = " + rooms.size());
/*  68 */     } catch (NullPointerException e) {
/*  69 */       e.printStackTrace();
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Message jsonStrToJavas(String message) {
/*  81 */     JSONObject jsonObject = JSONObject.fromObject(message);
/*  82 */     Message info1 = (Message)JSONObject.toBean(jsonObject, Message.class);
/*  83 */     return info1;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static String convertObject(Object info) {
/*  94 */     JSONObject jsonObject = JSONObject.fromObject(info);
/*  95 */     return jsonObject.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static List<String> getMessage(String room, int pageNo, int pageSize) throws IOException {
/* 108 */     File file = new File(rootUrl + room + ".txt");
/* 109 */     System.out.println("文件路径");
/* 110 */     System.out.println(rootUrl + room + ".txt");
/* 111 */     if (!file.exists()) {
/* 112 */       System.out.println("文件不存在");
/* 113 */       return null;
/*     */     } 
/* 115 */     System.out.println("文件存在");
/* 116 */     List<String> data = readForPage(file, pageNo, pageSize);
/* 117 */     return data;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void append(String filename, Object message) throws IOException {
/* 130 */     filename = rootUrl + filename + ".txt";
/* 131 */     String insertContent = convertObject(message) + "\n";
/* 132 */     int pos = 0;
/* 133 */     File tmp = File.createTempFile("tmp", null);
/* 134 */     tmp.deleteOnExit();
/*     */     try {
/* 136 */       RandomAccessFile raf = new RandomAccessFile(filename, "rw");
/* 137 */       FileOutputStream tmpOut = new FileOutputStream(tmp);
/* 138 */       FileInputStream tmpIn = new FileInputStream(tmp);
/* 139 */       raf.seek(pos);
/* 140 */       byte[] buf = new byte[64];
/* 141 */       int hasRead = 0;
/* 142 */       while ((hasRead = raf.read(buf)) > 0)
/*     */       {
/* 144 */         tmpOut.write(buf, 0, hasRead);
/*     */       }
/* 146 */       raf.seek(pos);
/* 147 */       raf.write(insertContent.getBytes());
/*     */       
/* 149 */       while ((hasRead = tmpIn.read(buf)) > 0) {
/* 150 */         raf.write(buf, 0, hasRead);
/*     */       }
/* 152 */     } catch (Exception e) {
/* 153 */       System.out.println("错误" + e.getMessage());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static JSONObject StringToJsonObject(String data) {
/* 166 */     List<String> infos = new ArrayList<>();
/* 167 */     infos.add(data);
/* 168 */     Map<Object, Object> map = new HashMap<>();
/* 169 */     map.put("data", infos);
/* 170 */     JSONObject jsonObject = JSONObject.fromObject(map);
/* 171 */     return jsonObject;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static List<String> readForPage(File sourceFile, int pageNo, int pageSize) throws IOException {
/* 184 */     List<String> result = new ArrayList<>();
/* 185 */     FileReader in = new FileReader(sourceFile);
/* 186 */     LineNumberReader reader = new LineNumberReader(in);
/* 187 */     String s = "";
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 192 */     int startRow = (pageNo - 1) * pageSize + 1;
/* 193 */     int endRow = pageNo * pageSize;
/* 194 */     int lines = 0;
/* 195 */     while (s != null) {
/* 196 */       lines++;
/* 197 */       s = reader.readLine();
/* 198 */       if (lines >= startRow && lines <= endRow) {
/* 199 */         if (s != null) {
/* 200 */           result.add(0, s);
/*     */           continue;
/*     */         } 
/* 203 */         lines--;
/*     */       } 
/*     */     } 
/*     */     
/* 207 */     reader.close();
/* 208 */     in.close();
/* 209 */     return result;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static ChatList isNewInfo(ChatList chatList, int pageNo, List<String> allInfo) throws IOException {
/* 223 */     System.out.println("查看全部获取的消息" + allInfo);
/*     */     
/*     */     try {
/* 226 */       if (allInfo.size() > 0) {
/* 227 */         String infos = allInfo.get(0);
/*     */         
/* 229 */         Message lastInfo = jsonStrToJavas(infos);
/* 230 */         System.out.println("本页最老的消息" + (String)allInfo.get(0));
/* 231 */         System.out.println("本页的最后一条信息" + ((lastInfo.getTimestamp() > chatList.getLast_modify_time()) ? 1 : 0));
/*     */         
/* 233 */         if (lastInfo.getTimestamp() >= chatList.getLast_modify_time()) {
/* 234 */           pageNo++;
/* 235 */           List<String> al